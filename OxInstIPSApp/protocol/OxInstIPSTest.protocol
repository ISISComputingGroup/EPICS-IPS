# File OxInstIPSTest.protocol
#
# Stream Device protocol file for the Oxford Instruments Modular IPS 
# superconducting magnet power supplies - file to test communications during
# commissioning.  Want only to read stuff, must not set anything.
#
# The full protocol is described in the IPS Operators Handbook. 
#
# The commands are all single upper case letters, which can be followed by a numeric value as a parameter.
# These are considered decimal numbers.
#
# The terminator is implied on page 41 of the Operators Handbook to be as <CR>,
# (Carriage Return, \r or Ox0D or CTRL-M) by default, but it can be CHANGED with the Q command
# to add an <LF> (Line Feed, \n or Ox0A or CTRL-J) afterwards.  The setting is lost and reverts
# to default if the unit is power-cycled.
#
Terminator = "\r";

# Timeout values cribbed from OxInstCryojet module - had occasional
# problems with the default settings with one record timing out and
# another record seeing the reply - see if longer time out will fix it.
#
readtimeout = 500;
replytimeout = 5000;
locktimeout = 20000;
PollPeriod = 500;
ExtraInput = Ignore;

# Protocol does not implement U command to unlock system commands or system commands.
# This is because they change configuration information and give access to RAM, which
# is not desirable to be interfaced to EPICS.
# Also there are some specialist commands the manual says are not intended or needed
# for customer use, so these are not done either.

#########################################################################################
# Get the unit version information - returns unit type and firmware information.
# Manual says letter commands always reply with themselves at the start, but
# found out this one does not.  Manual also shows a copyright symbol, which is not an
# ASCII symbol and might cause problems for EPICS.  In practice found (c) instead.
# The %s format grabs the string upto the first space, the %c grabs the rest.  It
# was too long to fit into one EPICS string record value.
#getVersion { out "V"; in "%#s"; }
#getVersion { out "V"; in "%c"; }
getVersion { out "V"; in "%(\$1:MODEL.VAL)s%(\$1:VERSION.VAL)c"; }

#########################################################################################
# Commands to read parameters.
# Uses the R command (Read Parameter) followed by integer in range 0 to 24.
# R3 Not Used, R4 R10, R11, R12, R13, R14 described as engineering diagnostic commands, so
# not implemented.
# Get demand current (output current) in amps - ER=yes (Extra Resolution option affects it).
getDemandCurrent { out "R0"; in "R%f"; }

# Get measured power supply voltage in volts - ER=no (Extra Resolution option does not affect it).
getSupplyVoltage { out "R1"; in "R%f"; }

# Get measured magnet curren in amps - ER=no.
getMeasuredMagnetCurrent { out "R2"; in "R%f"; }

# Get set point (target current) in amps ER=yes.
getSetPointCurrent { out "R5"; in "R%f"; }

# Get current sweep rate in amps per minute ER=yes.
getCurrentSweepRate { out "R6"; in "R%f"; }

# Get demand field (output field) in tesla ER=yes.
getDemandField { out "R7"; in "R%f"; }

# Get set point (target field) in tesla ER=yes.
getSetPointField { out "R8"; in "R%f"; }

# Get field sweep rate in tesla per minute ER=yes.
getFieldSweepRate { out "R9"; in "R%f"; }

# Get software voltage limit in volts ER=no.
getSoftwareVoltageLimit { out "R15"; in "R%f"; }

# Get persistent magnet current in amps ER=yes.
getPersistentMagnetCurrent { out "R16"; in "R%f"; }

# Get trip current in amps ER=yes.
getTripCurrent { out "R17"; in "R%f"; }

# Get persistent magnetic field in tesla ER=yes.
getPersistentMagnetField { out "R18"; in "R%f"; }

# Get trip field in tesla ER=yes.
getTripField { out "R19"; in "R%f"; }

# Get switch heater current in milliamp ER=no.
# There is a chance this is not needed for BL10J magnet - not all magnet systems have a switch
# heater.
getHeaterCurrent { out "R20"; in "R%f"; }

# Get safe current limit, most negative in amps ER=no.
getNegCurrentLimit { out "R21"; in "R%f"; }

# Get safe current limit, most positive in amps ER=no.
getPosCurrentLimit { out "R22"; in "R%f"; }

# Get lead resistance in milliohms ER=no.
getLeadResistance { out "R23"; in "R%f"; }

# Get magnet inductance in henry ER=no.
getMagnetInductance { out "R24"; in "R%f"; }

# End of list of commands to read parameters.
#########################################################################################
# Command to get the status - the IPS returns loads of flags in one command
#
# The X command - examine status.
# According to the manual the reply is of the form
#
# XmnAnCnHnMmnPmn
#
# where:
# 	m and n are integer digits
#	X, A, C, H, M and P are literal characters introducing the values for different types of status as follows
#	X is the system status
#	A is the activity
#		0 Hold
#		1 To Set Point
#		2 To Zero
#		4 Clamped
#	C is the Local/Remote Control status
#	H is for the switch heater
#	M is for the sweeping mode
#	P is for the polarity and has been superseded by signed values on the current and field parameters,
#	is present for backward compatibility and can be ignored, so we do.
#
# Tried to use enum format converter with hash modifier to both simplify and restrict what will be accepted, but kept getting start up
# errors - the protocol parse just objected to the syntax, no matter what was done with escaping zeroes, etc.
#	  "%(\$1:STS:ACTIVITY.VAL)#{A0=0|A1=1|A2=2|A4=4}"
#	  "%(\$1:STS:ACTIVITY.VAL)#{A\0=\0|A1=1|A2=2|A4=4}"
# This one was accepted and worked as advertised but did not do what was wanted, as EPICS received a 3, which is not an allowed value.
#	  "%(\$1:STS:ACTIVITY.VAL){A0|A1|A2|A4}"
getStatus { 
	out "X"; 
	in 
	  "X%(\$1:STS:SYSTEM:FAULT.VAL)1u%(\$1:STS:SYSTEM:LIMIT.VAL)1u"
	  "A%(\$1:STS:ACTIVITY.VAL)1u"
	  "C%(\$1:STS:CONTROL.VAL)1u"
	  "H%(\$1:STS:HEATER.VAL)1u"
	  "M%(\$1:STS:SWEEPMODE:PARAMS.VAL)1u%(\$1:STS:SWEEPMODE:SWEEP.VAL)1u"
	  "P%*1u%*1u"
	;
	# Try to recover from any mismatch by writing the value of the input that doesn't match
	# to a string record.  We expect error messages to start with ? character.
	@mismatch { in "%(\$1:DBG:STS:MISMATCH.VAL)c"; }
}

# End of examining the status.
#########################################################################################
# Want no chance of setting anything, so no commands other than status queries.

