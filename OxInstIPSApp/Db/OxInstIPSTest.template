#! Generated by VisualDCT v2.6
#! DBDSTART
#! DBD("../../dbd/OxInstIPS.dbd")
#! DBDEND

# NOTE: No idea what the ADEL fields should be - guessing completely.

#########################################################
# START OF RECORDS FOR READBACK FROM VERSION COMMAND.
# # Readback of the instrument model and version info.
# # Run the Version command, V.
# # The string was too long to put model and version into same record.
# # Scan this once, probably not needed again.
# The reply comes back and is split amongst other records.
record(stringin, "$(P):GET:VERSION") {
  field(DESC, "Examine Status")
  field(DTYP, "stream")
  field(INP, "@OxInstIPSTest.protocol getVersion($(P)) $(port)")
  field(PINI, "YES")
  field(FLNK, "$(P):MODEL")
  field(SCAN, "Passive")
}

record(stringin, "$(P):MODEL") {
  field(DESC, "Model.")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
  field(FLNK, "$(P):VERSION")
}

record(stringin, "$(P):VERSION") {
  field(DESC, "Firmware version.")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
}

#########################################################
# START OF RECORDS FOR READBACK OF R COMMAND PARAMETERS.

record(ai, "$(P):RBV:DEMANDCURRENT") {
  field(DESC, "Demand Current Readback")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(INP,  "@OxInstIPSTest.protocol getDemandCurrent $(port)")
  field(EGU,  "A")
  field(PREC, "8")
  field(ADEL, "0.000002" )
}

record(ai, "$(P):RBV:SUPPLYVOLTAGE") {
  field(DESC, "Supply Voltage Readback")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(INP,  "@OxInstIPSTest.protocol getSupplyVoltage $(port)")
  field(EGU,  "V")
  field(PREC, "8")
  field(ADEL, "0.000002" )
}

record(ai, "$(P):RBV:MEASUREDMAGNETCURRENT") {
  field(DESC, "Measured Magnet Current Readback")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(INP,  "@OxInstIPSTest.protocol getMeasuredMagnetCurrent $(port)")
  field(EGU,  "A")
  field(PREC, "8")
  field(ADEL, "0.000002" )
}

record(ai, "$(P):RBV:SETPOINTCURRENT") {
  field(DESC, "Set Point Current Readback")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(INP,  "@OxInstIPSTest.protocol getSetPointCurrent $(port)")
  field(EGU,  "A")
  field(PREC, "8")
  field(ADEL, "0.000002" )
}

record(ai, "$(P):RBV:CURRENTSWEEPRATE") {
  field(DESC, "Current Sweep Rate Readback")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(INP,  "@OxInstIPSTest.protocol getCurrentSweepRate $(port)")
  field(EGU,  "A/min")
  field(PREC, "8")
  field(ADEL, "0.000002" )
}

record(ai, "$(P):RBV:DEMANDFIELD") {
  field(DESC, "Demand Field Readback")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(INP,  "@OxInstIPSTest.protocol getDemandField $(port)")
  field(EGU,  "T")
  field(PREC, "8")
  field(ADEL, "0.000002" )
}

record(ai, "$(P):RBV:SETPOINTFIELD") {
  field(DESC, "Set Point Field Readback")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(INP,  "@OxInstIPSTest.protocol getSetPointField $(port)")
  field(EGU,  "T")
  field(PREC, "8")
  field(ADEL, "0.000002" )
}

record(ai, "$(P):RBV:FIELDSWEEPRATE") {
  field(DESC, "Field Sweep Rate Readback")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(INP,  "@OxInstIPSTest.protocol getFieldSweepRate $(port)")
  field(EGU,  "T/min")
  field(PREC, "8")
}

record(ai, "$(P):RBV:SOFTWAREVOLTAGELIMIT") {
  field(DESC, "Software Voltage Limit Readback")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(INP,  "@OxInstIPSTest.protocol getSoftwareVoltageLimit $(port)")
  field(EGU,  "V")
  field(PREC, "8")
  field(ADEL, "0.000002" )
}

record(ai, "$(P):RBV:PERSISTENTMAGNETCURRENT") {
  field(DESC, "Persistent Magnet Current Readback")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(INP,  "@OxInstIPSTest.protocol getPersistentMagnetCurrent $(port)")
  field(EGU,  "A")
  field(PREC, "8")
  field(ADEL, "0.000002" )
}

record(ai, "$(P):RBV:TRIPCURRENT") {
  field(DESC, "Trip Current Readback")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(INP,  "@OxInstIPSTest.protocol getTripCurrent $(port)")
  field(EGU,  "A")
  field(PREC, "8")
  field(ADEL, "0.000002" )
}

record(ai, "$(P):RBV:PERSISTENTMAGNETFIELD") {
  field(DESC, "Persistent Magnet Field Readback")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(INP,  "@OxInstIPSTest.protocol getPersistentMagnetField $(port)")
  field(EGU,  "T")
  field(PREC, "8")
  field(ADEL, "0.000002" )
}

record(ai, "$(P):RBV:TRIPFIELD") {
  field(DESC, "Trip Field Readback")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(INP,  "@OxInstIPSTest.protocol getTripField $(port)")
  field(EGU,  "T")
  field(PREC, "8")
  field(ADEL, "0.000002" )
}

record(ai, "$(P):RBV:HEATERCURRENT ") {
  field(DESC, "Heater Current Readback")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(INP,  "@OxInstIPSTest.protocol getHeaterCurrent  $(port)")
  field(EGU,  "mA")
  field(PREC, "8")
  field(ADEL, "0.000002" )
}

record(ai, "$(P):RBV:NEGCURRENTLIMIT") {
  field(DESC, "Neg Current Limit Readback")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(INP,  "@OxInstIPSTest.protocol getNegCurrentLimit $(port)")
  field(EGU,  "A")
  field(PREC, "8")
  field(ADEL, "0.000002" )
}

record(ai, "$(P):RBV:POSCURRENTLIMIT") {
  field(DESC, "Pos Current Limit Readback")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(INP,  "@OxInstIPSTest.protocol getPosCurrentLimit $(port)")
  field(EGU,  "A")
  field(PREC, "8")
  field(ADEL, "0.000002" )
}

record(ai, "$(P):RBV:LEADRESISTANCE") {
  field(DESC, "LeadResistance Readback")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(INP,  "@OxInstIPSTest.protocol getLeadResistance $(port)")
  field(EGU,  "mohm")
  field(PREC, "8")
  field(ADEL, "0.000002" )
}

record(ai, "$(P):RBV:MAGNETINDUCTANCE") {
  field(DESC, "Magnet Inductance Readback")
  field(DTYP, "stream")
  field(SCAN, "Passive")
  field(INP,  "@OxInstIPSTest.protocol getMagnetInductance $(port)")
  field(EGU,  "H")
  field(PREC, "8")
  field(ADEL, "0.000002" )
}

# Records to control scanning of the readback parameter records.
# Start with the stuff more likely to change.
record(fanout, "$(P):FAN:RBV:1") {
  field(DESC, "R scan fanout 1")
  field(SCAN, "1 second")
  field(LNK1, "$(P):RBV:DEMANDCURRENT")
  field(LNK2, "$(P):RBV:SUPPLYVOLTAGE")
  field(LNK3, "$(P):RBV:MEASUREDMAGNETICCURRENT")
  field(LNK4, "$(P):RBV:DEMANDFIELD")
  field(LNK5, "$(P):RBV:PERSISTENTMAGNETCURRENT")
  field(LNK6, "$(P):RBV:PERSISTENTMAGNETFIELD")
}

# Put some of the setup stuff on slower scanning.
record(fanout, "$(P):FAN:RBV:2") {
  field(DESC, "R scan fanout 2")
  field(SCAN, "2 second")
  field(LNK1, "$(P):RBV:SETPOINTCURRENT")
  field(LNK2, "$(P):RBV:CURRENTSWEEPRATE")
  field(LNK3, "$(P):RBV:SETPOINTFIELD")
  field(LNK4, "$(P):RBV:FIELDSWEEPRATE")
  field(LNK5, "$(P):RBV:NEGCURRENTLIMIT")
  field(LNK6, "$(P):RBV:POSCURRENTLIMIT")
}

record(fanout, "$(P):FAN:RBV:3") {
  field(DESC, "R scan fanout 3")
  field(SCAN, "10 second")
  field(LNK1, "$(P):RBV:SOFTWAREVOLTAGELIMIT")
  field(LNK2, "$(P):RBV:TRIPCURRENT")
  field(LNK3, "$(P):RBV:TRIPFIELD")
  field(LNK4, "$(P):RBV:HEATERCURRENT")
  field(LNK5, "$(P):RBV:LEADRESISTANCE")
  field(LNK6, "$(P):RBV:MAGNETINDUCTANCE")
}

# END OF RECORDS FOR READBACK OF R COMMAND PARAMETERS.
#########################################################
# START OF RECORDS FOR READBACK FROM EXAMINE STATUS COMMAND.
# # Run the Examine Status command, X.
# The reply comes back and is split amongst other records.
record(stringin, "$(P):GET:STATUS") {
  field(DESC, "Examine Status")
  field(DTYP, "stream")
  field(INP, "@OxInstIPSTest.protocol getStatus($(P)) $(port)")
  field(FLNK, "$(P):FAN:STATUS:1")
  field(SCAN, "1 second")
}

# 
# Examine status reply fanout.  Force processsing of records that use 
# the reply from the examine status command.
# 
# Fan out the processing to the records relevant to the reply.  The protocol itself knows the
# names of the records and sets the value: this is passing the processing baton to make sure
# the reply from the protocol to these records is processed.
#
record(fanout, "$(P):FAN:STS:1") {
  field(DESC, "X status fanout 1")
  field(SCAN, "Passive")
  field(LNK1, "$(P):STS:SYSTEM:FAULT")
  field(LNK2, "$(P):STS:SYSTEM:LIMIT")
  field(LNK3, "$(P):STS:ACTIVITY")
  field(LNK4, "$(P):STS:CONTROL")
  field(LNK5, "$(P):STS:SWEEPMODE:PARAMS")
  field(LNK6, "$(P):STS:SWEEPMODE:SWEEP")
  field(FLNK, "$(P):FAN:STS:2")
}

# One fanout cannot have enough links, so need a second one.  Processing baton
# passed on from the first fanout.
record(fanout, "$(P):FAN:STS:2") {
  field(DESC, "X status fanout 2")
  field(SCAN, "Passive")
  field(LNK1, "$(P):STS:HEATER")
  field(LNK2, "$(P):DBG:STS:MISMATCH")
}

# # Readback from m of Xmn part of Examine command return.
record(mbbi, "$(P):STS:SYSTEM:FAULT") {
  field(DESC, "System fault status")
  field(DTYP, "Soft Channel")
  field(ZRST, "Normal")
  field(ZRVL, "0")
  field(ONST, "Quenched")
  field(ONVL, "1")
  field(TWST, "Overheated")
  field(TWVL, "2")
  field(FRST, "Warming Up")
  field(FRVL, "4")
  field(EIST, "Fault")
  field(EIVL, "8")
}

# # Readback from n of Xmn part of Examine command return.
record(mbbi, "$(P):STS:SYSTEM:LIMIT") {
  field(DESC, "System limit status")
  field(DTYP, "Soft Channel")
  field(ZRST, "Normal")
  field(ZRVL, "0")
  field(ONST, "On +ve V Limit")
  field(ONVL, "1")
  field(TWST, "On -ve V Limit")
  field(TWVL, "2")
  field(FRST, "Current too -ve")
  field(FRVL, "4")
  field(EIST, "Current too +ve")
  field(EIVL, "8")
}

# # Readback from An part of Examine command return.
record(mbbi, "$(P):STS:ACTIVITY") {
  field(DESC, "Activity status")
  field(DTYP, "Soft Channel")
  field(ZRST, "Hold")
  field(ZRVL, "0")
  field(ONST, "To Set Point")
  field(ONVL, "1")
  field(TWST, "To Zero")
  field(TWVL, "2")
  field(FRST, "Clamped")
  field(FRVL, "4")
}

# # Readback from Cn part of Examine command return.
record(mbbi, "$(P):STS:CONTROL") {
  field(DESC, "Control status")
  field(DTYP, "Soft Channel")
  field(ZRST, "Local & Locked")
  field(ZRVL, "0")
  field(ONST, "Remote & Locked")
  field(ONVL, "1")
  field(TWST, "Local & Unlocked")
  field(TWVL, "2")
  field(THST, "Remote & Unlocked")
  field(THVL, "3")
  field(FRST, "Auto-Run-Down")
  field(FRVL, "4")
  field(FVST, "Auto-Run-Down")
  field(FVVL, "5")
  field(SXST, "Auto-Run-Down")
  field(SXVL, "6")
  field(SVST, "Auto-Run-Down")
  field(SVVL, "7")
}

# # Readback from Hn part of Examine command return.
# Don't think I10 magnet will use this.
# 0 switch closed, 1 switch open, 2 switch closed, 5 heater is on but low current, 8 no switch fitted.
record(mbbi, "$(P):STS:HEATER") {
  field(DESC, "Heater status")
  field(DTYP, "Soft Channel")
  field(ZRST, "Off Mag at 0")
  field(ZRVL, "0")
  field(ONST, "On")
  field(ONVL, "1")
  field(TWST, "Off Mag at F")
  field(TWVL, "2")
  field(FVST, "Heater Fault")
  field(FVVL, "5")
  field(EIST, "No Switch")
  field(EIVL, "8")
}

# # Readback from m of Mmn part of Examine command return.
# The Display is in Amps or Tesla.  The Magnet Sweep is fast or slow.
record(mbbi, "$(P):STS:SWEEPMODE:PARAMS") {
  field(DESC, "Mode status")
  field(DTYP, "Soft Channel")
  field(ZRST, "Amps Fast")
  field(ZRVL, "0")
  field(ONST, "Tesla Fast")
  field(ONVL, "1")
  field(FRST, "Amps Slow")
  field(FRVL, "4")
  field(FVST, "Tesla Slow")
  field(FVVL, "5")
}

# # Readback from n of Mmn part of Examine command return.
# # (Ignore the Pmn part of the Examine command return - no records for this.)
# 0 output constant, 1, 2, 3 output changing
record(mbbi, "$(P):STS:SWEEPMODE:SWEEP") {
  field(DESC, "Mode status")
  field(DTYP, "Soft Channel")
  field(ZRST, "At rest")
  field(ZRVL, "0")
  field(ONST, "Sweeping")
  field(ONVL, "1")
  field(TWST, "Sweep Limiting")
  field(TWVL, "2")
  field(THST, "Swping & Lmting")
  field(THVL, "3")
}

# To capture bits of mismatching status protocol.

record(stringin, "$(P):DBG:STS:MISMATCH") {
  field(DESC, "Mismatching protocol string.")
  field(DTYP, "Soft Channel")
}

# END OF RECORDS FOR READBACK FROM EXAMINE STATUS COMMAND.
#########################################################
# DO NOT PUT ANY SET COMMANDS IN THE TEST TEMPLATE.
#

#! Further lines contain data used by VisualDCT
#! View(97,63,1.2)
#! Record("$(P):VERSION",440,465,0,0,"$(P):VERSION")
